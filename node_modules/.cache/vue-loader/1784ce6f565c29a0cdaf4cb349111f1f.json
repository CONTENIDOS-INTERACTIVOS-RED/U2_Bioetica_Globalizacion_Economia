{"remainingRequest":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/src/views/curso/Tema2.vue?vue&type=template&id=ca491a84&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/src/views/curso/Tema2.vue","mtime":1753214035795},{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Bioetica_Globalizacion_Economia/U2_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}